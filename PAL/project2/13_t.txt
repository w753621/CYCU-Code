; =============== Problem 12 可見數據 ====================
ab
(define a "=============== Problem 12 viewable case =================")
a

(clean-environment)

; ------- Some newly added stuff -------

; In OurScheme (and Lisp too), there is no discrimination against 
; functions

cons ; the binding of this (primitive) symbol is a function
car  ; the binding of this (primitive) symbol is also a function

(define myCons cons) ; just like int/float/string can be the binding
(define myCar car)   ; of a symbol, a function can be a binding too

myCons ; what is the (current) binding of this symbol?

(myCons cons myCar) ; the evaluated result of 'myCons' is a function
(myCons 3 '(4 myCar))

((myCar (cons myCons cons)) '(10) 20)




(begin 
   (myCar '(1 2 3))
   (cdr '(1 2 3))
   (car (cdr '(1 (20 myCons))))
)

(begin
   (list (list 1 - 3 +)
         (myCons 25 car)
   )
)
((myCar (cons myCons cons)) 
 (cdr (cdr '(Hi! (How is) (it) going ?))))

(define >? string>?)
(define <? string<?)
(define =? string=?)

(define first "CYCU")
(define second "NCU")
(define third "NSYU")

(define cc 
        (if (>? first second)
            "Good"
            (if (<? first second)
                "Bad"
                "So So"
            )
        )
)
cc

(if (=? second first)
    "Really?"
    (if (>? second first)
        "OK."
        (if (<? second first)
            "Must be."
            "Impossible."
        )
    )
)

(begin 
   (car '(1 2 3))
   (CDR (cons 3 x))
   (car (cdr y))
)

(begin
   (list '(1 2 3)
         (cons 25 35)
   )
)(begin)(car (cdr (cdr '(Hi! (How is) (it) going ?))))
(cons 'Whether (cdr (cdr '(To be or not to be ?)))
)
(cdr (car (cons '(That is the question !) ()
          )
     )
)

(cdr (car (cons "Hi," " Everybody!")
     )
)
(cdr (cdr (list "Hi," " Everybody!" "Wake up!")))
(define sun-shine '(The sun shines bright))
(define money 50)

(cons (- (+ 30 money) 40)
      (cdr (cdr sun-shine))
)
(define a 20)
(define d 20)
(define b 40)
(if (> a (+ b d))
    +
    /
)
(+ d
     ( if (> a b)
          (+ a (* a b))
          (- b (+ a a))
     )
  )
(+ d
     ( if (> a b)
          (+ a (* a b))
          ( begin
            (- b (+ a a))
            70
          )
     )
  )
(if #t (begin 3 4 a) (begin 6 7))
(if (> b a) ((+ 1 2) 4 5) (6 7))
(if (< b a) ((+ 1 2) 4 5) (a 7))
(cond ( (> b a) "Good" "Better" "Best") 
        ( #t 'Never 'let 'it 'rest!)   )
(define a (+ a b a))

(cond ( (> (* a 2) (* b 2)) (+ a b) (+ (- a b) (* a b)) ) 
      ( (> a b) Look! )
      ( (< 20 10) It's a bird !)
      (  It's a plane ! ) 
      (  #t It's Superman !  )
)

(cond ( (> (* a 2) (* b 2)) (+ a b) (+ (- a b) (* Look! b)) ) 
      ( (> a b) 100 )
      ( (< 20 10) It's a bird !)
      (  It's a plane ! ) 
      (  #t It's Superman !  )
)

(cond ( (< a b) 
        (+ a b) (- a b) (- a Look!) (* a b)
      ) 
      (  #t 
         ( list
                ( list 'OK? 'Correct? )
                ( list 'OK? 'Correct? )
         ) 
      )   
)

(define opr-list 
        (list (list cons car cdr)
              (list + - * /)
              (list pair? atom?)
        )
)

((car (car opr-list)) (car (car opr-list)) 
                      (car (cdr (cdr opr-list)))
)    

( ((car (car opr-list)) (car (car opr-list)) 
                        (car (cdr (cdr opr-list)))
  )  
  (car '(30 40))
)  
    
( (car (cdr ((car (car opr-list)) (car (car opr-list)) 
                                  (car (cdr (cdr opr-list)))
            )  
       )
  )
  (car '(30 40))
)  
    
( (car (cdr ((car (car opr-list)) (car (car opr-list)) 
                                  (car (cdr (cdr opr-list)))
            )  
       )
  )
  (car '((30) 40))
)  
    
; =============== Problem 13 可見數據 ====================
ab
(define a "=============== Problem 13 viewable case =================")
a

(clean-environment)
a

(define operators (list + - * /))
( (car (cdr operators))
  ((car operators) 10 20)
  ((car (cdr (cdr operators))) 11 22)
)

(define listOfNum '(10.1254 20.318503 30.1 40.2 50 60 70 80.999 90.9)
)
(define listOfStr '("What?" "When?" "Where?" "Who?" "How?" "Why?" "How come?") 
)
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)
(cons (car listOfSym)
      (cons (car (cdr listOfStr))
            (list (car (cdr (cdr listOfNum))))
      )
)
(cons (car (cdr (cdr listOfNum)))
      (cons (car (cdr listOfStr))
            (list (car listOfSym))
      )
)

(define abc
  (list
    (cons (car listOfSym)
          (cons (car (cdr listOfStr))
                (list (car (cdr (cdr listOfNum))))
          )
    ) ; cons
    (cons (car (cdr (cdr listOfNum)))
          (cons (car (cdr listOfStr))
                (list (car listOfSym))
          )
    ) ; cons
  ) ; list
) ; define
abc
(cons (car (car abc))
      (cdr abc)
)
(cons (car (car (car abc)))
      (cdr abc)
)

(define efg
  (cons (car abc)
        (car (cdr abc))
  )
)
efg
abc
(define ++ (car operators))
(define -- (car (cdr operators)))
( ++ (car listOfNum)
    (car (cdr listOfNum))
    (car (cdr (cdr listOfNum)))
)
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
     )
     ( if ( string>? (car listOfStr) (car (cdr listOfStr))
          )
         10
         15
     )
)
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfStr)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           10
           15
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
           (car listOfSym)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
           (car listOfSym)
           (cdr listOfNum)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (car (cdr (cdr listOfNum))))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car "It's a plane!")
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car "It's a plane!")
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car It's a plane!)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (car (cdr (cdr listOfNum listOfNum))))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car It's a plane!)
      )
   )
(define What? (car listOfNum))
(define When? (car (cdr listOfNum)))
listOfSym
( cons (list (car listOfSym)
               What?
         )
         (cdr listOfSym)
  )
listOfSym
(define listOfSym
          ( cons (list (car listOfSym)
                       What?
                 )
                 (cdr listOfSym)
          )
  )
listOfSym
( cons (car listOfSym)
         ( cons (list (car (cdr listOfSym))
                      When?
                )
                (cdr (cdr listOfSym))
         )
  )
listOfSym
(define listOfSym
          ( cons (car listOfSym)
                 ( cons (list (car (cdr listOfSym))
                              When?
                        )
                        (cdr (cdr listOfSym))
                 )
          )
  )
listOfSym
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)
listOfSym
(define listOfSym
          ( cons (list (car listOfSym)
                       (car listOfNum)
                 )
                 (cdr listOfSym)
          )
  )
listOfSym
(define listOfSym
          ( cons (car listOfSym)
                 ( cons (list (car (cdr listOfSym))
                              (car (cdr listOfNum))
                        )
                        (cdr (cdr listOfSym))
                 )
          )
  )
listOfSym(exit . (exit))(exit . nil)<<